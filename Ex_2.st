Object subclass: #MyShape	instanceVariableNames: 'color isFilled'	classVariableNames: ''	package: 'Ex_2'!!MyShape methodsFor: 'accessing' stamp: 'ClementJP 10/5/2022 18:09'!isFilled	^ isFilled ! !!MyShape methodsFor: 'accessing' stamp: 'ClementJP 10/5/2022 18:09'!color	^ color! !!MyShape methodsFor: 'accessing' stamp: 'ClementJP 10/5/2022 18:23'!isFilled: aBool		isFilled := aBool.! !!MyShape methodsFor: 'accessing' stamp: 'ClementJP 10/5/2022 18:28'!area	^ 'Not implemented'! !!MyShape methodsFor: 'accessing' stamp: 'ClementJP 10/5/2022 19:06'!printOn: aStream	aStream nextPutAll: color asString.	aStream nextPutAll: ' -'.	isFilled ifFalse: [ aStream nextPutAll: ' not' ].	aStream nextPutAll: ' filled'.! !!MyShape methodsFor: 'accessing' stamp: 'ClementJP 10/5/2022 18:23'!color: aString		color := aString.! !!MyShape methodsFor: 'accessing' stamp: 'ClementJP 10/5/2022 20:51'!perimeter	^ 'Not implemented'! !!MyShape methodsFor: 'initialization' stamp: 'ClementJP 10/5/2022 19:05'!initialize	super initialize.	color := 'Blank'.	isFilled := false.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MyShape class	instanceVariableNames: ''!!MyShape class methodsFor: 'accessing - arguments' stamp: 'ClementJP 10/5/2022 18:24'!color: aString isFilled: aBool	|shape|	shape := self new.	shape color: aString.	shape isFilled: aBool.		^ shape! !MyShape subclass: #MyCircle	instanceVariableNames: 'radius'	classVariableNames: ''	package: 'Ex_2'!!MyCircle methodsFor: 'printing' stamp: 'ClementJP 10/5/2022 19:08'!printOn: aStream	super printOn: aStream.	aStream nextPutAll: ' - radius = '.	aStream nextPutAll: radius asString.! !!MyCircle methodsFor: 'accessing' stamp: 'ClementJP 10/6/2022 19:05'!perimeter	^ 2 * Float pi * radius! !!MyCircle methodsFor: 'accessing' stamp: 'ClementJP 10/6/2022 19:05'!radius: aNumber	radius := (aNumber abs).! !!MyCircle methodsFor: 'accessing' stamp: 'ClementJP 10/5/2022 18:21'!radius	^radius! !!MyCircle methodsFor: 'accessing' stamp: 'ClementJP 10/5/2022 18:57'!area	^ Float pi * (radius squared)! !!MyCircle methodsFor: 'initialization' stamp: 'ClementJP 10/5/2022 18:18'!initialize	super initialize.	radius := 0.	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MyCircle class	instanceVariableNames: ''!!MyCircle class methodsFor: 'accessing' stamp: 'ClementJP 10/5/2022 19:12'!radius: aNumber	|circle|	circle := self new.	circle radius: aNumber.		^ circle! !!MyCircle class methodsFor: 'accessing' stamp: 'ClementJP 10/5/2022 19:09'!color: aString isFilled: aBool radius: aNumber	|circle|	circle := self new.	circle color: aString.	circle isFilled: aBool.	circle radius: aNumber.		^ circle! !MyShape subclass: #MyRectangle	instanceVariableNames: 'width length'	classVariableNames: ''	package: 'Ex_2'!!MyRectangle methodsFor: 'initialization' stamp: 'ClementJP 10/5/2022 18:18'!initialize	super initialize.	width := 0.	length := 0.! !!MyRectangle methodsFor: 'printing' stamp: 'ClementJP 10/5/2022 19:23'!printOn: aStream	super printOn: aStream.	aStream nextPutAll: ' - width = '.	aStream nextPutAll: width asString.	aStream nextPutAll: ' - length = '.	aStream nextPutAll: length asString.! !!MyRectangle methodsFor: 'accessing' stamp: 'ClementJP 10/6/2022 19:05'!length: aNumber		length := (aNumber abs)! !!MyRectangle methodsFor: 'accessing' stamp: 'ClementJP 10/5/2022 19:22'!area	^ length * width! !!MyRectangle methodsFor: 'accessing' stamp: 'ClementJP 10/5/2022 18:21'!width	^width ! !!MyRectangle methodsFor: 'accessing' stamp: 'ClementJP 10/5/2022 18:21'!length	^length ! !!MyRectangle methodsFor: 'accessing' stamp: 'ClementJP 10/5/2022 19:22'!perimeter	^ 2 * (length + width)! !!MyRectangle methodsFor: 'accessing' stamp: 'ClementJP 10/6/2022 19:06'!width: aNumber		width := (aNumber abs)! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MyRectangle class	instanceVariableNames: ''!!MyRectangle class methodsFor: 'accessing' stamp: 'ClementJP 10/5/2022 19:20'!color: aString isFilled: aBool width: aNumber1 length: aNumber2	|rect|	rect := self new.	rect color: aString.	rect isFilled: aBool.	rect width: aNumber1.	rect length: aNumber2.		^ rect! !!MyRectangle class methodsFor: 'accessing' stamp: 'ClementJP 10/5/2022 19:21'!width: aNumber1 length: aNumber2	|rect|	rect := self new.	rect width: aNumber1.	rect length: aNumber2.		^ rect! !MyRectangle subclass: #MySquare	instanceVariableNames: 'side'	classVariableNames: ''	package: 'Ex_2'!!MySquare methodsFor: 'accessing - arguments' stamp: 'ClementJP 10/5/2022 19:28'!width: aNumber		self side: aNumber.! !!MySquare methodsFor: 'accessing - arguments' stamp: 'ClementJP 10/5/2022 19:28'!length: aNumber		self side: aNumber.! !!MySquare methodsFor: 'accessing - arguments' stamp: 'ClementJP 10/6/2022 19:06'!side: aNumber		side := (aNumber abs).	width := side.	length := side.! !!MySquare methodsFor: 'printing' stamp: 'ClementJP 10/5/2022 20:00'!printOn: aStream	super printOn: aStream.	aStream nextPutAll: ' - side = '.	aStream nextPutAll: side asString.! !!MySquare methodsFor: 'accessing' stamp: 'ClementJP 10/5/2022 18:21'!side	^side! !!MySquare methodsFor: 'initialization' stamp: 'ClementJP 10/5/2022 19:25'!initialize	super initialize.	self side: 0.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MySquare class	instanceVariableNames: ''!!MySquare class methodsFor: 'accessing' stamp: 'ClementJP 10/5/2022 19:27'!color: aString isFilled: aBool side: aNumber	|square|	square := self new.	square color: aString.	square isFilled: aBool.	square side: aNumber.		^ square! !!MySquare class methodsFor: 'accessing' stamp: 'ClementJP 10/5/2022 19:27'!side: aNumber	|square|	square := self new.	square side: aNumber.		^ square! !TestCase subclass: #MyTestCircle	instanceVariableNames: ''	classVariableNames: ''	package: 'Ex_2'!!MyTestCircle methodsFor: 'tests' stamp: 'ClementJP 10/5/2022 19:06'!testInit	|circle|	circle := MyCircle new.		self assert: circle color equals: 'Blank'.	self assert: circle isFilled equals: false.	self assert: circle radius equals: 0.! !!MyTestCircle methodsFor: 'tests' stamp: 'ClementJP 10/5/2022 18:58'!testPerimeter	|circle|	circle := MyCircle radius: 8.	self assert: circle perimeter closeTo: 50 precision: 1.! !!MyTestCircle methodsFor: 'tests' stamp: 'ClementJP 10/5/2022 18:48'!testCreateSimple	|circle|	circle := MyCircle radius: 8.	self assert: circle radius equals: 8.! !!MyTestCircle methodsFor: 'tests' stamp: 'ClementJP 10/5/2022 18:48'!testCreateFull	|circle|	circle := MyCircle color: 'Red' isFilled: true radius: 8.		self assert: circle color equals: 'Red'.	self assert: circle isFilled equals: true.	self assert: circle radius equals: 8.! !!MyTestCircle methodsFor: 'tests' stamp: 'ClementJP 10/5/2022 18:57'!testArea	|circle|	circle := MyCircle radius: 8.	self assert: circle area closeTo: 201 precision: 1.! !!MyTestCircle methodsFor: 'tests' stamp: 'ClementJP 10/5/2022 19:12'!testPrint	|circle|		circle := MyCircle color: 'Red' isFilled: true radius: 7.	self assert: circle asString equals: 'Red - filled - radius = 7'.		circle := MyCircle radius: 9.	self assert: circle asString equals: 'Blank - not filled - radius = 9'.! !TestCase subclass: #MyTestRectangle	instanceVariableNames: ''	classVariableNames: ''	package: 'Ex_2'!!MyTestRectangle methodsFor: 'tests' stamp: 'ClementJP 10/5/2022 19:13'!testInit	|rect|	rect := MyRectangle new.		self assert: rect color equals: 'Blank'.	self assert: rect isFilled equals: false.	self assert: rect width equals: 0.	self assert: rect length equals: 0.! !!MyTestRectangle methodsFor: 'tests' stamp: 'ClementJP 10/5/2022 19:21'!testPerimeter	|rect|	rect := MyRectangle width: 4 length: 10.	self assert: rect perimeter equals: 28.! !!MyTestRectangle methodsFor: 'tests' stamp: 'ClementJP 10/5/2022 19:14'!testCreateSimple	|rect|	rect := MyRectangle width: 4 length: 10.		self assert: rect width equals: 4.	self assert: rect length equals: 10.! !!MyTestRectangle methodsFor: 'tests' stamp: 'ClementJP 10/5/2022 19:15'!testCreateFull	|rect|	rect := MyRectangle color: 'Red' isFilled: true width: 4 length: 10.		self assert: rect color equals: 'Red'.	self assert: rect isFilled equals: true.	self assert: rect width equals: 4.	self assert: rect length equals: 10.! !!MyTestRectangle methodsFor: 'tests' stamp: 'ClementJP 10/5/2022 19:16'!testArea	|rect|	rect := MyRectangle width: 4 length: 10.	self assert: rect area equals: 40.! !!MyTestRectangle methodsFor: 'tests' stamp: 'ClementJP 10/5/2022 19:18'!testPrint	|rect|		rect := MyRectangle color: 'Red' isFilled: true width: 7 length: 5.	self assert: rect asString equals: 'Red - filled - width = 7 - length = 5'.		rect := MyRectangle width: 5 length: 7.	self assert: rect asString equals: 'Blank - not filled - width = 5 - length = 7'.! !TestCase subclass: #MyTestShape	instanceVariableNames: ''	classVariableNames: ''	package: 'Ex_2'!!MyTestShape methodsFor: 'tests' stamp: 'ClementJP 10/5/2022 18:27'!testCreate	|shape|	shape := MyShape color: 'Red' isFilled: true.		self assert: shape color equals: 'Red'.	self assert: shape isFilled equals: true.! !!MyTestShape methodsFor: 'tests' stamp: 'ClementJP 10/5/2022 19:05'!testInit	|shape|	shape := MyShape new.		self assert: shape color equals: 'Blank'.	self assert: shape isFilled equals: false.! !!MyTestShape methodsFor: 'tests' stamp: 'ClementJP 10/5/2022 19:05'!testPrint	|shape|	shape := MyShape color: 'Red' isFilled: true.		self assert: shape asString equals: 'Red - filled'.		shape := MyShape new.	self assert: shape asString equals: 'Blank - not filled'.! !TestCase subclass: #MyTestSquare	instanceVariableNames: ''	classVariableNames: ''	package: 'Ex_2'!!MyTestSquare methodsFor: 'tests' stamp: 'ClementJP 10/5/2022 19:26'!testInit	|square|	square := MySquare new.		self assert: square color equals: 'Blank'.	self assert: square isFilled equals: false.	self assert: square width equals: 0.	self assert: square length equals: 0.	self assert: square side equals: 0.! !!MyTestSquare methodsFor: 'tests' stamp: 'ClementJP 10/6/2022 19:06'!testPerimeter	|square|	square := MySquare side: 3.		self assert: square perimeter equals: 12.! !!MyTestSquare methodsFor: 'tests' stamp: 'ClementJP 10/5/2022 19:29'!testCreateSimple	|square|	square := MySquare side: 4.		self assert: square width equals: 4.	self assert: square length equals: 4.	self assert: square side equals: 4.! !!MyTestSquare methodsFor: 'tests' stamp: 'ClementJP 10/5/2022 19:30'!testCreateFull	|square|	square := MySquare color: 'Red' isFilled: true side: 4.		self assert: square color equals: 'Red'.	self assert: square isFilled equals: true.	self assert: square width equals: 4.	self assert: square length equals: 4.	self assert: square side equals: 4.! !!MyTestSquare methodsFor: 'tests' stamp: 'ClementJP 10/5/2022 19:31'!testArea	|square|	square := MySquare side: 6.		self assert: square area equals: 36.! !!MyTestSquare methodsFor: 'tests' stamp: 'ClementJP 10/5/2022 20:01'!testPrint	|square|		square := MySquare color: 'Red' isFilled: true side: 7.	self assert: square asString equals: 'Red - filled - width = 7 - length = 7 - side = 7'.		square := MySquare side: 5.	self assert: square asString equals: 'Blank - not filled - width = 5 - length = 5 - side = 5'.! !