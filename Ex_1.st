Object subclass: #MyLine	instanceVariableNames: 'begin end'	classVariableNames: ''	package: 'Ex_1'!!MyLine methodsFor: 'accessing' stamp: 'ClementJP 10/5/2022 09:00'!end	^end! !!MyLine methodsFor: 'accessing' stamp: 'ClementJP 10/5/2022 09:13'!begin	^begin! !!MyLine methodsFor: 'accessing' stamp: 'ClementJP 10/5/2022 09:57'!gradient		( end x - begin x ) ~= 0		ifTrue: [ ^( end y - begin y ) / ( end x - begin x ) ]		ifFalse: [ ^0 ].! !!MyLine methodsFor: 'accessing' stamp: 'ClementJP 10/5/2022 09:22'!length	^ ( ( begin x - end x ) squared + ( begin y - end y ) squared ) sqrt! !!MyLine methodsFor: 'accessing' stamp: 'ClementJP 10/5/2022 09:01'!begin: aMyPoint	begin := aMyPoint.! !!MyLine methodsFor: 'accessing' stamp: 'ClementJP 10/5/2022 09:01'!end: aMyPoint	end := aMyPoint.! !!MyLine methodsFor: 'initialization' stamp: 'ClementJP 10/5/2022 09:02'!initialize	super initialize.	begin := MyPoint new.	end := MyPoint new.! !!MyLine methodsFor: 'printing' stamp: 'ClementJP 10/5/2022 09:25'!printOn:  aStream	aStream		nextPutAll: begin asString;		nextPutAll: ' --> ';		nextPutAll: end asString.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MyLine class	instanceVariableNames: ''!!MyLine class methodsFor: 'instance creation' stamp: 'ClementJP 10/5/2022 09:04'!begin: firstPoint end: secondPoint	^ self new		begin: firstPoint;		end: secondPoint;		yourself.! !TestCase subclass: #MyLineTest	instanceVariableNames: ''	classVariableNames: ''	package: 'Ex_1'!!MyLineTest methodsFor: 'tests' stamp: 'ClementJP 10/5/2022 09:47'!testLineGradientVertical	|begin end line|	begin := MyPoint x: 3 y: 1.	end := MyPoint x: 3 y: 8.	line := MyLine begin: begin end: end.		self assert: line gradient equals: 0.! !!MyLineTest methodsFor: 'tests' stamp: 'ClementJP 10/5/2022 09:47'!testLineGradientHorizontal	|begin end line|	begin := MyPoint x: 1 y: 6.	end := MyPoint x: 5 y: 6.	line := MyLine begin: begin end: end.		self assert: line gradient equals: 0.! !!MyLineTest methodsFor: 'tests' stamp: 'ClementJP 10/5/2022 09:37'!testLinePrint	|begin end line|	begin := MyPoint x: 4 y: 6.	end := MyPoint x: 2 y: 1.	line := MyLine begin: begin end: end.		self assert: line asString equals: '(4,6) --> (2,1)'.! !!MyLineTest methodsFor: 'tests' stamp: 'ClementJP 10/5/2022 09:41'!testLineLength	|begin end line|	begin := MyPoint x: 4 y: 6.	end := MyPoint x: 2 y: 1.	line := MyLine begin: begin end: end.		self assert: line length closeTo: 5.39 precision: 0.01.! !!MyLineTest methodsFor: 'tests' stamp: 'ClementJP 10/5/2022 09:30'!testLineInit	|line|	line := MyLine new.		self assert: line begin x equals: 0.	self assert: line begin y equals: 0.	self assert: line end x equals: 0.	self assert: line end y equals: 0.! !!MyLineTest methodsFor: 'tests' stamp: 'ClementJP 10/5/2022 09:44'!testLineGradient	|begin end line|	begin := MyPoint x: 4 y: 6.	end := MyPoint x: 2 y: 1.	line := MyLine begin: begin end: end.		self assert: line gradient closeTo: 2.5 precision: 0.1.! !!MyLineTest methodsFor: 'tests' stamp: 'ClementJP 10/5/2022 09:59'!testLineGradientInvariant	|p1 p2 line1 line2|	p1 := MyPoint x: 4 y: 6.	p2 := MyPoint x: 2 y: 1.	line1 := MyLine begin: p1 end: p2.	line2 := MyLine begin: p2 end: p1.		self assert: line1 gradient equals: line2 gradient.! !!MyLineTest methodsFor: 'tests' stamp: 'ClementJP 10/5/2022 09:43'!testLineCreate	|begin end line|	begin := MyPoint x: 4 y: 6.	end := MyPoint x: 2 y: 1.	line := MyLine begin: begin end: end.		self assert: line begin x equals: 4.	self assert: line begin y equals: 6.	self assert: line end x equals: 2.	self assert: line end y equals: 1.! !Object subclass: #MyPoint	instanceVariableNames: 'x y'	classVariableNames: ''	package: 'Ex_1'!!MyPoint methodsFor: 'printing' stamp: 'ClementJP 10/5/2022 09:24'!printOn: aStream	aStream		nextPut: $(;		nextPutAll: x asString;		nextPut: $,;		nextPutAll: y asString;		nextPut: $).! !!MyPoint methodsFor: 'initialization' stamp: 'ClementJP 10/5/2022 08:43'!initialize	super initialize.	x := 0.	y := 0.! !!MyPoint methodsFor: 'accessing' stamp: 'ClementJP 10/5/2022 08:28'!x: aNumber	x := aNumber.			! !!MyPoint methodsFor: 'accessing' stamp: 'ClementJP 10/5/2022 08:38'!y: aNumber	y := aNumber.	^ aNumber! !!MyPoint methodsFor: 'accessing' stamp: 'ClementJP 10/5/2022 08:33'!y	^y! !!MyPoint methodsFor: 'accessing' stamp: 'ClementJP 10/5/2022 08:33'!x	^x! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MyPoint class	instanceVariableNames: ''!!MyPoint class methodsFor: 'instance creation' stamp: 'ClementJP 10/5/2022 08:41'!x: firstCoordinate y: secondCoordinate	^ self new		x: firstCoordinate;		y: secondCoordinate;		yourself.! !TestCase subclass: #MyPointTest	instanceVariableNames: ''	classVariableNames: ''	package: 'Ex_1'!!MyPointTest methodsFor: 'tests' stamp: 'ClementJP 10/5/2022 08:44'!testPointInit	|p|	p := MyPoint new.		self assert: p x equals: 0.	self assert: p y equals: 0.! !!MyPointTest methodsFor: 'tests' stamp: 'ClementJP 10/5/2022 08:53'!testPrint	|p|	p := MyPoint x: 8 y: 10.		self assert: p asString equals: '(8,10)'.! !!MyPointTest methodsFor: 'tests' stamp: 'ClementJP 10/5/2022 08:34'!testPointCreate	|p|	p := MyPoint new.	p x:1.	p y:2.		self assert: p x equals: 1.	self assert: p y equals: 2.! !